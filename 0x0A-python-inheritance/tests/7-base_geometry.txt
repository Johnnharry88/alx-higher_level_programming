Importing the function from the mobile:
	>>> BG = __import__("7-ase_geometry").BaseGeometry

Checking module docstring:
	>>> n = __import___("7-base_geometry").__doc__
	>>> len(n) > 1
	True

Checking for class docstring:
	>>> d = __import__("7-base_geometry").BaseGeometry.__doc__
	>>> len(d) > 1
	True

Checking for method docstring:
	>>> meth = __import__("7-base_geometry").BaseGeometry.area.__doc>>
	>>> len(meth) > 1
	True
	>>> meth1 = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
	>>> len(meth1) > 1
	True

Checking fo area failure
	>>> x = BG()
	>>> x.area()
	Traceback (most recent call last):
	...
	Exception: area() is not implmented

Checking too many arguments for area:
	>>> x.area(1)
	Tracceback (most recent call last):
	...
	TypeError: area() takes 1 positional argument but 2 were given

Checking for integer == 0:
	>>> x.integer_validator("integer", 0)
	Traceback (most recent call last):
	...
	ValueError: Integer must be greater than 0

Checking for integer < 0:
	>>> b.integer_validator("integer", -1)
	Traceback (most recent call last):
	...
	ValueError: Integer must be greater than 0

Checking for non_integer type:
	>>> x.integer_validator("bool", True)
	Traceback (most recent call last):
	---
	TypeError: bool must be an integer
	>>> x.integer_validator("Float", 1.5)
	Traceback (most recent call last):
	...
	TypeError: float must be an integer
	>>> x.integer_validator("complex", complex(1,1))
	Traceback (most recent call last):
	...
	TypeError: complex must be an integer
	>>> x.integer_validator("string","hello")
	Traceback (most recent call last):
	...
	TypeError: string must be an integer
	>>> x.integer_validator("list", [4, 5, 6]
	Traceback (most recent call last):
	...
	TypeError: list must be an integer
	>>> x.integer_validator("tuple", (3, 5))
	Traceback (most recent call last):
	...
	TypeError: tuple must be an integer
	>>> x.integer_validator("frozenset", frozenset(["hello", "world"]))
	Traceback (most recent call last):
	...
	TypeError: frozenset must be an integer
	>>> x.integer_validator("dict", {"key": "value"})
	Traceback (most recent call last):
	...
	TypeError: dict must be an integer
	>>> x.integer_validator("set", {"hello", "world"})
	Traceback (most recent call last):
	...
	TypeError: set must be an integer
	>>> x.integer_validator("bytes", b"bytes")
	Traceback (most recent call last):
	...
	TypeError: bytes must be an integer
	>>> x.integer_validator("bytearrays", bytearray(b"bytes"))
	Traceback (most recnet call last):
	...
	TypeError: bytearrays must be an integer

Checking for an arguments to integer_validator:
	>>> x.integer_vslidator("integer")
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 2 requires positional arguments: 'name' and 'value'

Checking for only 1 arguments to integer_validator
	>>> x.integer_vaidator("integer")
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 1 required positional argument: 'value'

Checking form too many arguments:
	>>> x.integer_validator("integer", 1, 2)
	Traceback (most recent call last):
	...
	TypeError: integer_validator() takes 3 positional arguments but 4 were given
